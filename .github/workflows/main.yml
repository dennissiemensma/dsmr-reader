name: CI

on:
  push:
    branches: [ v4 ]
  pull_request:
    branches: [ v4 ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - 3.6
#          - 3.7
#          - 3.8

    services:
      postgres:
        image: postgres
        env:
            POSTGRES_DB: test_dsmrreader
            POSTGRES_USER: root
            POSTGRES_PASSWORD: testpasswd
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2



      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL client, populates
        # the client with data, and retrieves data
        run: node actions-test-client.js
        # Environment variable used by the `client.js` script to create
        # a new PostgreSQL client.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432



      - name: Setup Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: ${{ matrix.python-version }}

      - name: System dependencies
        run: sudo apt install -y gettext libgettextpo-dev
          #libmariadb-dev-compat libmariadb-dev

      - name: Cached dependencies
        uses: actions/cache@v2.1.2
        with:
          path: |
            ~/.cache/pip
            $pythonLocation/lib/python3.6/site-packages
          key: ${{ matrix.python-version }}-${{ hashFiles('$GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/dev.txt') }}-${{ hashFiles('$GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/base.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r $GITHUB_WORKSPACE/dsmrreader/provisioning/requirements/dev.txt
          pip install psycopg2-binary
          pip freeze | grep psycopg2-binary

      - name: dependencies location
        run: pip show django

#      - name: Check pylama
#        run: pylama
#
#      - name: Check autopep8
#        run: autopep8 -r . --diff --exit-code

      - name: Run SQLite tests
        run: py.test --cov --cov-report=xml dsmr_api/tests/v1/test_api.py
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: non-production-value
            DJANGO_DATABASE_ENGINE: django.db.backends.sqlite3

      - name: Run PostgreSQL tests
        run: py.test --cov --cov-report=xml dsmr_api/tests/v1/test_api.py
        env:
            DJANGO_SETTINGS_MODULE: dsmrreader.config.test
            DJANGO_SECRET_KEY: non-production-value
            DJANGO_DATABASE_ENGINE: django.db.backends.postgresql
            DJANGO_DATABASE_HOST: localhost
            DJANGO_DATABASE_PORT: 5432
            DJANGO_DATABASE_NAME: test_dsmrreader
            DJANGO_DATABASE_USER: root
            DJANGO_DATABASE_PASSWORD: testpasswd

#      - name: Setup MySQL
#        uses: mirromutth/mysql-action@de1fba8b3f90ce8db80f663a7043be3cf3231248
#        with:
#          mysql version:
#          mysql root password: # optional, default is
#          # MYSQL_DATABASE - name for the default database that is created
#          mysql database: test_dsmrreader
#          mysql user: # optional, default is
#          # MYSQL_PASSWORD - specified superuser password which user is power for created database
#          mysql password: # optional, default is

